#include <stdio.h>
#include <conio.h>
#include <graphics.h>

int x,y,m[8][8];

void mapp(int l, int k, int colour, int piece){
    for(int K=400,i=0;K>=0, i<8;K-=50, i++){
        for(int L=50, j=0; L<=400, j<8; L+=50, j++){
            if(k==K&&l==L){
                if(colour==1)
                    m[i][j]=1;
                else if(colour==2)
                    m[i][j]=2;
                else
                    m[i][j]=0;
            }
        }
    }
}

void kingBlue(int k1, int k2){
    setcolor(BLUE);
    k1=k1+5;
    k2=k2+5;
	rectangle(k1+5,k2+15,k1+35,k2+35);
	rectangle(k1+10,k2+10,k1+30,k2+30);
	int i;
	for(i=k2+10;i<=k2+30;i++){line(k1+12,i,k1+28,i);}
	for(i=k1+10;i<=k1+30;i=i+2){line(i,k2+4,i,k2+10);}
	mapp(k1,k2,1,5);
}

void kingWhite(int k1, int k2){
    setcolor(WHITE);
    k1=k1+5;
    k2=k2+5;
	rectangle(k1+5,k2+15,k1+35,k2+35);
	rectangle(k1+10,k2+10,k1+30,k2+30);
	int i;
	for(i=k2+10;i<=k2+30;i++){line(k1+12,i,k1+28,i);}
	for(i=k1+10;i<=k1+30;i=i+2){line(i,k2+4,i,k2+10);}
	mapp(k1,k2,1,5);
}

void kingGreen(int k1, int k2){
    setcolor(GREEN);
    k1=k1+5;
    k2=k2+5;
	rectangle(k1+5,k2+15,k1+35,k2+35);
	rectangle(k1+10,k2+10,k1+30,k2+30);
	int i;
	for(i=k2+10;i<=k2+30;i++){line(k1+12,i,k1+28,i);}
	for(i=k1+10;i<=k1+30;i=i+2){line(i,k2+4,i,k2+10);}
	mapp(k1,k2,1,5);
}

void kingBlack(int k1, int k2){
    setcolor(BLACK);
    k1=k1+5;
    k2=k2+5;
	rectangle(k1+5,k2+15,k1+35,k2+35);
	rectangle(k1+10,k2+10,k1+30,k2+30);
	int i;
	for(i=k2+10;i<=k2+30;i++){line(k1+12,i,k1+28,i);}
	for(i=k1+10;i<=k1+30;i=i+2){line(i,k2+4,i,k2+10);}
    mapp(k1,k2,2,5);
}

void queenBlue(int q1, int q2){
    setcolor(BLUE);
    q1=q1+5;
    q2=q2+5;
	line(q1+5,q2+35,q1+35,q2+35);
	line(q1+5,q2+35,q1+35,q2+10);
	line(q1+35,q2+35,q1+5,q2+10);
	line(q1+5,q2+10,q1+35,q2+10);
	int i;
	for(i=q1+5;i<=q1+35;i=i+4){line(i,q2+4,i,q2+10);}
	for(i=q1+7;i<=q1+35;i=i+4){line(i,q2+2,i,q2+10);}
	for(i=q1+5;i<=q1+35;i++){line(q1+20,q2+22,i,q2+10);}
	for(i=q1+5;i<=q1+35;i++){line(q1+20,q2+22,i,q2+35);}
    mapp(q1,q2,1,6);
}

void queenGreen(int q1, int q2){
    setcolor(GREEN);
    q1=q1+5;
    q2=q2+5;
	line(q1+5,q2+35,q1+35,q2+35);
	line(q1+5,q2+35,q1+35,q2+10);
	line(q1+35,q2+35,q1+5,q2+10);
	line(q1+5,q2+10,q1+35,q2+10);
	int i;
	for(i=q1+5;i<=q1+35;i=i+4){line(i,q2+4,i,q2+10);}
	for(i=q1+7;i<=q1+35;i=i+4){line(i,q2+2,i,q2+10);}
	for(i=q1+5;i<=q1+35;i++){line(q1+20,q2+22,i,q2+10);}
	for(i=q1+5;i<=q1+35;i++){line(q1+20,q2+22,i,q2+35);}
    mapp(q1,q2,1,6);
}

void queenWhite(int q1, int q2){
    setcolor(WHITE);
    q1=q1+5;
    q2=q2+5;
	line(q1+5,q2+35,q1+35,q2+35);
	line(q1+5,q2+35,q1+35,q2+10);
	line(q1+35,q2+35,q1+5,q2+10);
	line(q1+5,q2+10,q1+35,q2+10);
	int i;
	for(i=q1+5;i<=q1+35;i=i+4){line(i,q2+4,i,q2+10);}
	for(i=q1+7;i<=q1+35;i=i+4){line(i,q2+2,i,q2+10);}
	for(i=q1+5;i<=q1+35;i++){line(q1+20,q2+22,i,q2+10);}
	for(i=q1+5;i<=q1+35;i++){line(q1+20,q2+22,i,q2+35);}
    mapp(q1,q2,1,6);
}

void queenBlack(int q1, int q2){
    setcolor(BLACK);
    q1=q1+5;
    q2=q2+5;
	line(q1+5,q2+35,q1+35,q2+35);
	line(q1+5,q2+35,q1+35,q2+10);
	line(q1+35,q2+35,q1+5,q2+10);
	line(q1+5,q2+10,q1+35,q2+10);
	int i;
	for(i=q1+5;i<=q1+35;i=i+4){line(i,q2+4,i,q2+10);}
	for(i=q1+7;i<=q1+35;i=i+4){line(i,q2+2,i,q2+10);}
	for(i=q1+5;i<=q1+35;i++){line(q1+20,q2+22,i,q2+10);}
	for(i=q1+5;i<=q1+35;i++){line(q1+20,q2+22,i,q2+35);}
    mapp(q1,q2,2,6);
}

void rookBlue(int r1, int r2){
    setcolor(BLUE);
    r1=r1+4;
    r2=r2+5;
	rectangle(r1+12,r2+5,r1+28,r2+35);
	line(r1+12,r2+30,r1+28,r2+30);
	line(r1+12,r2+10,r1+28,r2+10);
	for(int i=r2+10;i<=r2+30;i++)
	{
		line(r1+12,i,r1+28,i);
	}
    mapp(r1,r2,1,3);
}

void rookWhite(int r1, int r2){
    setcolor(WHITE);
    r1=r1+4;
    r2=r2+5;
	rectangle(r1+12,r2+5,r1+28,r2+35);
	line(r1+12,r2+30,r1+28,r2+30);
	line(r1+12,r2+10,r1+28,r2+10);
	for(int i=r2+10;i<=r2+30;i++)
	{
		line(r1+12,i,r1+28,i);
	}
    mapp(r1,r2,1,3);
}

void rookGreen(int r1, int r2){
    setcolor(GREEN);
    r1=r1+4;
    r2=r2+5;
	rectangle(r1+12,r2+5,r1+28,r2+35);
	line(r1+12,r2+30,r1+28,r2+30);
	line(r1+12,r2+10,r1+28,r2+10);
	for(int i=r2+10;i<=r2+30;i++)
	{
		line(r1+12,i,r1+28,i);
	}
    mapp(r1,r2,1,3);
}

void rookBlack(int r1, int r2){
    setcolor(BLACK);
    r1=r1+4;
    r2=r2+5;
	rectangle(r1+12,r2+5,r1+28,r2+35);
	line(r1+12,r2+30,r1+28,r2+30);
	line(r1+12,r2+10,r1+28,r2+10);
	for(int i=r2+10;i<=r2+30;i++)
	{
		line(r1+12,i,r1+28,i);
	}
    mapp(r1,r2,2,3);
}

void bishopBlack(int b1, int b2){
    setcolor(BLACK);
    b1=b1+4;
    b2=b2+4;
	line(b1+10,b2+35,b1+30,b2+35);
	line(b1+10,b2+35,b1+20,b2+5);
	line(b1+30,b2+35,b1+20,b2+5);
	line(b1+15,b2+30,b1+25,b2+30);
	line(b1+15,b2+30,b1+10,b2+35);
	line(b1+25,b2+30,b1+30,b2+35);
	for(int i=b1+15;i<=b1+25;i++)
	{
		line(b1+20,b2+5,i,b2+30);
	}
    mapp(b1,b2,2,4);
}

void bishopWhite(int b1, int b2){
    setcolor(WHITE);
    b1=b1+4;
    b2=b2+4;
	line(b1+10,b2+35,b1+30,b2+35);
	line(b1+10,b2+35,b1+20,b2+5);
	line(b1+30,b2+35,b1+20,b2+5);
	line(b1+15,b2+30,b1+25,b2+30);
	line(b1+15,b2+30,b1+10,b2+35);
	line(b1+25,b2+30,b1+30,b2+35);
	for(int i=b1+15;i<=b1+25;i++)
	{
		line(b1+20,b2+5,i,b2+30);
	}
    mapp(b1,b2,2,4);
}

void bishopGreen(int b1, int b2){
    setcolor(GREEN);
    b1=b1+4;
    b2=b2+4;
	line(b1+10,b2+35,b1+30,b2+35);
	line(b1+10,b2+35,b1+20,b2+5);
	line(b1+30,b2+35,b1+20,b2+5);
	line(b1+15,b2+30,b1+25,b2+30);
	line(b1+15,b2+30,b1+10,b2+35);
	line(b1+25,b2+30,b1+30,b2+35);
	for(int i=b1+15;i<=b1+25;i++)
	{
		line(b1+20,b2+5,i,b2+30);
	}
    mapp(b1,b2,2,4);
}

void bishopBlue(int b1, int b2){
    setcolor(BLUE);
    b1=b1+4;
    b2=b2+4;
	line(b1+10,b2+35,b1+30,b2+35);
	line(b1+10,b2+35,b1+20,b2+5);
	line(b1+30,b2+35,b1+20,b2+5);
	line(b1+15,b2+30,b1+25,b2+30);
	line(b1+15,b2+30,b1+10,b2+35);
	line(b1+25,b2+30,b1+30,b2+35);
	for(int i=b1+15;i<=b1+25;i++)
	{
		line(b1+20,b2+5,i,b2+30);
	}
    mapp(b1,b2,1,4);
}

void knightBlue(int k1, int k2){
    setcolor(BLUE);
    k1=k1+5;
    k2=k2+5;
	line(k1+10,k2+5,k1+10,k2+35);
	line(k1+10,k2+10,k1+15,k2+10);
	line(k1+15,k2+10,k1+15,k2+20);
	line(k1+15,k2+20,k1+30,k2+20);
	line(k1+30,k2+20,k1+30,k2+35);

	line(k1+30,k2+35,k1+25,k2+35);
	line(k1+25,k2+35,k1+25,k2+25);
	line(k1+25,k2+25,k1+15,k2+25);
	line(k1+15,k2+25,k1+15,k2+35);
	line(k1+15,k2+35,k1+10,k2+35);
	line(k1+10,k2+33,k1+15,k2+33);
	line(k1+30,k2+33,k1+25,k2+33);
	int i;
	for(i=k1+10;i<=k1+20;i=i+2){line(i,k2+5,i,k2+10);}
	for(i=k2+10;i<=k2+20;i=i+2){line(k1+15,i,k1+20,i);}
	for(i=k1+10;i<=k1+15;i++){line(i,k2+10,i,k2+33);}
	for(i=k1+15;i<=k1+30;i++){line(i,k2+20,i,k2+25);}
	for(i=k1+25;i<=k1+30;i++){line(i,k2+25,i,k2+33);}
    mapp(k1,k2,1,2);
}

void knightWhite(int k1, int k2){
    setcolor(WHITE);
    k1=k1+5;
    k2=k2+5;
	line(k1+10,k2+5,k1+10,k2+35);
	line(k1+10,k2+10,k1+15,k2+10);
	line(k1+15,k2+10,k1+15,k2+20);
	line(k1+15,k2+20,k1+30,k2+20);
	line(k1+30,k2+20,k1+30,k2+35);

	line(k1+30,k2+35,k1+25,k2+35);
	line(k1+25,k2+35,k1+25,k2+25);
	line(k1+25,k2+25,k1+15,k2+25);
	line(k1+15,k2+25,k1+15,k2+35);
	line(k1+15,k2+35,k1+10,k2+35);
	line(k1+10,k2+33,k1+15,k2+33);
	line(k1+30,k2+33,k1+25,k2+33);
	int i;
	for(i=k1+10;i<=k1+20;i=i+2){line(i,k2+5,i,k2+10);}
	for(i=k2+10;i<=k2+20;i=i+2){line(k1+15,i,k1+20,i);}
	for(i=k1+10;i<=k1+15;i++){line(i,k2+10,i,k2+33);}
	for(i=k1+15;i<=k1+30;i++){line(i,k2+20,i,k2+25);}
	for(i=k1+25;i<=k1+30;i++){line(i,k2+25,i,k2+33);}
    mapp(k1,k2,1,2);
}

void knightGreen(int k1, int k2){
    setcolor(GREEN);
    k1=k1+5;
    k2=k2+5;
	line(k1+10,k2+5,k1+10,k2+35);
	line(k1+10,k2+10,k1+15,k2+10);
	line(k1+15,k2+10,k1+15,k2+20);
	line(k1+15,k2+20,k1+30,k2+20);
	line(k1+30,k2+20,k1+30,k2+35);

	line(k1+30,k2+35,k1+25,k2+35);
	line(k1+25,k2+35,k1+25,k2+25);
	line(k1+25,k2+25,k1+15,k2+25);
	line(k1+15,k2+25,k1+15,k2+35);
	line(k1+15,k2+35,k1+10,k2+35);
	line(k1+10,k2+33,k1+15,k2+33);
	line(k1+30,k2+33,k1+25,k2+33);
	int i;
	for(i=k1+10;i<=k1+20;i=i+2){line(i,k2+5,i,k2+10);}
	for(i=k2+10;i<=k2+20;i=i+2){line(k1+15,i,k1+20,i);}
	for(i=k1+10;i<=k1+15;i++){line(i,k2+10,i,k2+33);}
	for(i=k1+15;i<=k1+30;i++){line(i,k2+20,i,k2+25);}
	for(i=k1+25;i<=k1+30;i++){line(i,k2+25,i,k2+33);}
    mapp(k1,k2,1,2);
}

void knightBlack(int k1, int k2){
    setcolor(BLACK);
    k1=k1+5;
    k2=k2+5;
	line(k1+10,k2+5,k1+10,k2+35);
	line(k1+10,k2+10,k1+15,k2+10);
	line(k1+15,k2+10,k1+15,k2+20);
	line(k1+15,k2+20,k1+30,k2+20);
	line(k1+30,k2+20,k1+30,k2+35);

	line(k1+30,k2+35,k1+25,k2+35);
	line(k1+25,k2+35,k1+25,k2+25);
	line(k1+25,k2+25,k1+15,k2+25);
	line(k1+15,k2+25,k1+15,k2+35);
	line(k1+15,k2+35,k1+10,k2+35);
	line(k1+10,k2+33,k1+15,k2+33);
	line(k1+30,k2+33,k1+25,k2+33);
	int i;
	for(i=k1+10;i<=k1+20;i=i+2){line(i,k2+5,i,k2+10);}
	for(i=k2+10;i<=k2+20;i=i+2){line(k1+15,i,k1+20,i);}
	for(i=k1+10;i<=k1+15;i++){line(i,k2+10,i,k2+33);}
	for(i=k1+15;i<=k1+30;i++){line(i,k2+20,i,k2+25);}
	for(i=k1+25;i<=k1+30;i++){line(i,k2+25,i,k2+33);}
    mapp(k1,k2,2,2);
}

void pawnBlack(int p1, int p2){
    setcolor(BLACK);
    line(p1+5,p2+35,p1+35,p2+35);
    for(int i=p1+5;i<=p1+35;i++)
    {
        line(p1+20,p2+15,i,p2+30);
    }
    line(p1+8,p2+30,p1+32,p2+30);
    line(p1+5,p2+35,p1+20,p2+15);
    line(p1+35,p2+35,p1+20,p2+15);
    circle(p1+20,p2+10,5);
    mapp(p1,p2,2,1);
}

void pawnBlack1(int p1, int p2){
    setcolor(BLACK);
    p1=p1+4;
    p2=p2+3;
    line(p1+5,p2+35,p1+35,p2+35);
    for(int i=p1+5;i<=p1+35;i++)
    {
        line(p1+20,p2+15,i,p2+30);
    }
    line(p1+8,p2+30,p1+32,p2+30);
    line(p1+5,p2+35,p1+20,p2+15);
    line(p1+35,p2+35,p1+20,p2+15);
    circle(p1+20,p2+10,5);
    mapp(p1,p2,2,1);
}

void pawnGreen(int p1, int p2){
    setcolor(GREEN);
    p1=p1+4;
    p2=p2+3;
    line(p1+5,p2+35,p1+35,p2+35);
    for(int i=p1+5;i<=p1+35;i++)
    {
        line(p1+20,p2+15,i,p2+30);
    }
    line(p1+8,p2+30,p1+32,p2+30);
    line(p1+5,p2+35,p1+20,p2+15);
    line(p1+35,p2+35,p1+20,p2+15);
    circle(p1+20,p2+10,5);
    mapp(p1,p2,2,1);
}

void pawnWhite(int p1, int p2){
    setcolor(WHITE);
    p1=p1+4;
    p2=p2+3;
    line(p1+5,p2+35,p1+35,p2+35);
    for(int i=p1+5;i<=p1+35;i++)
    {
        line(p1+20,p2+15,i,p2+30);
    }
    line(p1+8,p2+30,p1+32,p2+30);
    line(p1+5,p2+35,p1+20,p2+15);
    line(p1+35,p2+35,p1+20,p2+15);
    circle(p1+20,p2+10,5);
    mapp(p1,p2,2,1);
}

void pawnBlue(int p1, int p2){
    setcolor(BLUE);
    line(p1+5,p2+35,p1+35,p2+35);
    for(int i=p1+5;i<=p1+35;i++)
    {
        line(p1+20,p2+15,i,p2+30);
    }
    line(p1+8,p2+30,p1+32,p2+30);
    line(p1+5,p2+35,p1+20,p2+15);
    line(p1+35,p2+35,p1+20,p2+15);
    circle(p1+20,p2+10,5);
    mapp(p1,p2,1,1);
}

void pawnBlue1(int p1, int p2){
    setcolor(BLUE);
    p1=p1+4;
    p2=p2+3;
    line(p1+5,p2+35,p1+35,p2+35);
    for(int i=p1+5;i<=p1+35;i++)
    {
        line(p1+20,p2+15,i,p2+30);
    }
    line(p1+8,p2+30,p1+32,p2+30);
    line(p1+5,p2+35,p1+20,p2+15);
    line(p1+35,p2+35,p1+20,p2+15);
    circle(p1+20,p2+10,5);
    mapp(p1,p2,1,1);
}

/*void fromCoordinates(char l, int n){
    if(l==a)
        x=50;
    if(l==)
}*/

void resetBoard(){
    int f=0,g=49;
    for(int i=1;i<=4;i++){
        f+=50;
        setcolor(WHITE);
        for(int e=f;e<=(f+g);e+=1){
            line(50,e,99,e);
        }
        setcolor(GREEN);
        for(int e=f;e<=(f+g);e+=1){
            line(100,e,149,e);
        }
        setcolor(WHITE);
        for(int e=f;e<=(f+g);e+=1){
            line(150,e,199,e);
        }
        setcolor(GREEN);
        for(int e=f;e<=(f+g);e+=1){
            line(200,e,249,e);
        }
        setcolor(WHITE);
        for(int e=f;e<=(f+g);e+=1){
            line(250,e,299,e);
        }
        setcolor(GREEN);
        for(int e=f;e<=(f+g);e+=1){
            line(300,e,349,e);
        }
        setcolor(WHITE);
        for(int e=f;e<=(f+g);e+=1){
            line(350,e,399,e);
        }
        setcolor(GREEN);
        for(int e=f;e<=(f+g);e+=1){
            line(400,e,449,e);
        }
        f+=50;
        setcolor(GREEN);
        for(int e=f;e<=(f+g);e+=1){
            line(50,e,99,e);
        }
        setcolor(WHITE);
        for(int e=f;e<=(f+g);e+=1){
            line(100,e,149,e);
        }
        setcolor(GREEN);
        for(int e=f;e<=(f+g);e+=1){
            line(150,e,199,e);
        }
        setcolor(WHITE);
        for(int e=f;e<=(f+g);e+=1){
            line(200,e,249,e);
        }
        setcolor(GREEN);
        for(int e=f;e<=(f+g);e+=1){
            line(250,e,299,e);
        }
        setcolor(WHITE);
        for(int e=f;e<=(f+g);e+=1){
            line(300,e,349,e);
        }
        setcolor(GREEN);
        for(int e=f;e<=(f+g);e+=1){
            line(350,e,399,e);
        }
        setcolor(WHITE);
        for(int e=f;e<=(f+g);e+=1){
            line(400,e,449,e);
        }
    }
    for(int l=1; l<=8; l++){
        int p1=04,p2=103;
        p1 = 04 + 50*l;
        pawnBlack(p1,p2);
    }

    for(int l=1; l<=8; l++){
        int p1=04,p2=353;
        p1 = 04 + 50*l;
        pawnBlue(p1,p2);
    }

	knightBlack(100,50);
	knightBlack(350,50);
	knightBlue(100,400);
	knightBlue(350,400);

    bishopBlack(300,50);
    bishopBlue(300,400);
    bishopBlack(150,50);
    bishopBlue(150,400);

	rookBlue(400,400);
	rookBlue(50,400);
	rookBlack(400,50);
	rookBlack(50,50);

	queenBlack(200,50);
	queenBlue(200,400);

    kingBlack(250,50);
	kingBlue(250,400);
}

int main()
{
    int i,j,k;
    int gd=DETECT,gm;//DETECT is macro defined in graphics.h
    int ch3[][50]={ {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
    int ch4[][50]={ {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};
    initgraph(&gd,&gm,"D:\\TC\\BGI");//initialize graphic mode
//    setbkcolor(WHITE);//set color of background to darkgray
//    int y;
//    scanf("%d",&y);
    printf("AN ANIMATED CHESS MATCH REPLAY OF MAGNUS CARLSEN VS VISHWANATHAN ANAND\nHELD IN 2005\nTOURNAMENT NAME: CIUDAD DE LEON(XVIII)\n");
    setcolor(WHITE);
	outtextxy(25,65,"8");
	outtextxy(25,115,"7");
	outtextxy(25,165,"6");
	outtextxy(25,215,"5");
	outtextxy(25,265,"4");
	outtextxy(25,315,"3");
	outtextxy(25,365,"2");
	outtextxy(25,415,"1");

    outtextxy(65,25,"a");
	outtextxy(115,25,"b");
	outtextxy(165,25,"c");
	outtextxy(215,25,"d");
	outtextxy(265,25,"e");
	outtextxy(315,25,"f");
	outtextxy(365,25,"g");
	outtextxy(415,25,"h");

	outtextxy(485,415,"MAGNUS CARLSEN");
	outtextxy(520,430, "(Blue)");
	outtextxy(470,60,"VISWANATHAN ANAND");
	outtextxy(515,75, "(Black)");

    for(k=0;k<64;k++){
        for(i=0;i<50;i++){
            for(j=0;j<50;j++){
                if(k==0){
                    if(ch4[i][j]==1)
                    putpixel(j+50,i+50,WHITE);
                }
                if(k==1){
                    if(ch4[i][j]==1)
                    putpixel(j+100,i+50,GREEN);
                }
                //if(k==1){
                //    if(ch4[i][j]==1)
                //    putpixel(j+100,i+50,BLUE);
                //}
                if(k==2){
                    if(ch4[i][j]==1)
                    putpixel(j+150,i+50,WHITE);
                }
                if(k==3){
                    if(ch4[i][j]==1)
                    putpixel(j+200,i+50,GREEN);
                }
                if(k==4){
                    if(ch4[i][j]==1)
                    putpixel(j+250,i+50,WHITE);
                }
                if(k==5){
                    if(ch4[i][j]==1)
                    putpixel(j+300,i+50,GREEN);
                }
                if(k==6){
                    if(ch4[i][j]==1)
                    putpixel(j+350,i+50,WHITE);
                }
                if(k==7){
                    if(ch4[i][j]==1)
                    putpixel(j+400,i+50,GREEN);
                }
                if(k==8){
                    if(ch4[i][j]==1)
                    putpixel(j+50,i+100,GREEN);
                }
                if(k==9){
                    if(ch4[i][j]==1)
                    putpixel(j+100,i+100,WHITE);
                }
                if(k==10){
                    if(ch4[i][j]==1)
                    putpixel(j+150,i+100,GREEN);
                }
                if(k==11){
                    if(ch4[i][j]==1)
                    putpixel(j+200,i+100,WHITE);
                }
                if(k==12){
                    if(ch4[i][j]==1)
                    putpixel(j+250,i+100,GREEN);
                }
                if(k==13){
                    if(ch4[i][j]==1)
                    putpixel(j+300,i+100,WHITE);
                }
                if(k==14){
                    if(ch4[i][j]==1)
                    putpixel(j+350,i+100,GREEN);
                }
                if(k==15){
                    if(ch4[i][j]==1)
                    putpixel(j+400,i+100,WHITE);
                }
                if(k==16){
                    if(ch4[i][j]==1)
                    putpixel(j+50,i+150,WHITE);
                }
                if(k==17){
                    if(ch4[i][j]==1)
                    putpixel(j+100,i+150,GREEN);
                }
                if(k==18){
                    if(ch4[i][j]==1)
                    putpixel(j+150,i+150,WHITE);
                }
                if(k==19){
                    if(ch4[i][j]==1)
                    putpixel(j+200,i+150,GREEN);
                }
                if(k==20){
                    if(ch4[i][j]==1)
                    putpixel(j+250,i+150,WHITE);
                }
                if(k==21){
                    if(ch4[i][j]==1)
                    putpixel(j+300,i+150,GREEN);
                }
                if(k==22){
                    if(ch4[i][j]==1)
                    putpixel(j+350,i+150,WHITE);
                }
                if(k==23){
                    if(ch4[i][j]==1)
                    putpixel(j+400,i+150,GREEN);
                }
                if(k==24){
                    if(ch4[i][j]==1)
                    putpixel(j+50,i+200,GREEN);
                }
                if(k==25){
                    if(ch4[i][j]==1)
                    putpixel(j+100,i+200,WHITE);
                }
                if(k==26){
                    if(ch4[i][j]==1)
                    putpixel(j+150,i+200,GREEN);
                }
                if(k==27){
                    if(ch4[i][j]==1)
                    putpixel(j+200,i+200,WHITE);
                }
                if(k==28){
                    if(ch4[i][j]==1)
                    putpixel(j+250,i+200,GREEN);
                }
                if(k==29){
                    if(ch4[i][j]==1)
                    putpixel(j+300,i+200,WHITE);
                }
                if(k==30){
                    if(ch4[i][j]==1)
                    putpixel(j+350,i+200,GREEN);
                }
                if(k==31){
                    if(ch4[i][j]==1)
                    putpixel(j+400,i+200,WHITE);
                }
                if(k==32){
                    if(ch4[i][j]==1)
                    putpixel(j+50,i+250,WHITE);
                }
                if(k==33){
                    if(ch4[i][j]==1)
                    putpixel(j+100,i+250,GREEN);
                }
                if(k==34){
                    if(ch4[i][j]==1)
                    putpixel(j+150,i+250,WHITE);
                }
                if(k==35){
                    if(ch4[i][j]==1)
                    putpixel(j+200,i+250,GREEN);
                }
                if(k==36){
                    if(ch4[i][j]==1)
                    putpixel(j+250,i+250,WHITE);
                }
                if(k==37){
                    if(ch4[i][j]==1)
                    putpixel(j+300,i+250,GREEN);
                }
                if(k==38){
                    if(ch4[i][j]==1)
                    putpixel(j+350,i+250,WHITE);
                }
                if(k==39){
                    if(ch4[i][j]==1)
                    putpixel(j+400,i+250,GREEN);
                }
                if(k==40){
                    if(ch4[i][j]==1)
                    putpixel(j+50,i+300,GREEN);
                }
                if(k==41){
                    if(ch4[i][j]==1)
                    putpixel(j+100,i+300,WHITE);
                }
                if(k==42){
                    if(ch4[i][j]==1)
                    putpixel(j+150,i+300,GREEN);
                }
                if(k==43){
                    if(ch4[i][j]==1)
                    putpixel(j+200,i+300,WHITE);
                }
                if(k==44){
                    if(ch4[i][j]==1)
                    putpixel(j+250,i+300,GREEN);
                }
                if(k==45){
                    if(ch4[i][j]==1)
                    putpixel(j+300,i+300,WHITE);
                }
                if(k==46){
                    if(ch4[i][j]==1)
                    putpixel(j+350,i+300,GREEN);
                }
                if(k==47){
                    if(ch4[i][j]==1)
                    putpixel(j+400,i+300,WHITE);
                }
                if(k==48){
                    if(ch4[i][j]==1)
                    putpixel(j+50,i+350,WHITE);
                }
                if(k==49){
                    if(ch4[i][j]==1)
                    putpixel(j+100,i+350,GREEN);
                }
                if(k==50){
                    if(ch4[i][j]==1)
                    putpixel(j+150,i+350,WHITE);
                }
                if(k==51){
                    if(ch4[i][j]==1)
                    putpixel(j+200,i+350,GREEN);
                }
                if(k==52){
                    if(ch4[i][j]==1)
                    putpixel(j+250,i+350,WHITE);
                }
                if(k==53){
                    if(ch4[i][j]==1)
                    putpixel(j+300,i+350,GREEN);
                }
                if(k==54){
                    if(ch4[i][j]==1)
                    putpixel(j+350,i+350,WHITE);
                }
                if(k==55){
                    if(ch4[i][j]==1)
                    putpixel(j+400,i+350,GREEN);
                }
                if(k==56){
                    if(ch4[i][j]==1)
                    putpixel(j+50,i+400,GREEN);
                }
                if(k==57){
                    if(ch4[i][j]==1)
                    putpixel(j+100,i+400,WHITE);
                }
                if(k==58){
                    if(ch4[i][j]==1)
                    putpixel(j+150,i+400,GREEN);
                }
                if(k==59){
                    if(ch4[i][j]==1)
                    putpixel(j+200,i+400,WHITE);
                }
                if(k==60){
                    if(ch4[i][j]==1)
                    putpixel(j+250,i+400,GREEN);
                }
                if(k==61){
                    if(ch4[i][j]==1)
                    putpixel(j+300,i+400,WHITE);
                }
                if(k==62){
                    if(ch4[i][j]==1)
                    putpixel(j+350,i+400,GREEN);
                }
                if(k==63){
                    if(ch4[i][j]==1)
                    putpixel(j+400,i+400,WHITE);
                }
                //if(k==2){
                //    if(ch3[i][j]==1)
                //    putpixel(j+150,i+50,BLUE);
                //}
            }
//            delay(100);
        }
    }
//    for(int l = 1; l<=8; l++){

    for(int l=1; l<=8; l++){
        int p1=04,p2=103;
        p1 = 04 + 50*l;
        pawnBlack(p1,p2);
    }

    for(int l=1; l<=8; l++){
        int p1=04,p2=353;
        p1 = 04 + 50*l;
        pawnBlue(p1,p2);
    }

	knightBlack(100,50);
	knightBlack(350,50);
	knightBlue(100,400);
	knightBlue(350,400);

    bishopBlack(300,50);
    bishopBlue(300,400);
    bishopBlack(150,50);
    bishopBlue(150,400);

	rookBlue(400,400);
	rookBlue(50,400);
	rookBlack(400,50);
	rookBlack(50,50);

	queenBlack(200,50);
	queenBlue(200,400);

    kingBlack(250,50);
	kingBlue(250,400);

	resetBoard();
	delay(1000);
    int d=0;
	delay(d);
    int g;
//    scanf("%d",&d);
//1st move
move1:
	resetBoard();
    pawnWhite(250,350);
    int D=1;
    for(int e=350; e>=250;e=e-D){
        pawnBlue1(250,e);
        setcolor(WHITE);
        for(int e =350; e<400; e+=1){
            line(251,e,299,e);
        }
        setcolor(GREEN);
        for(int e =300 ;e<350; e+=1){
            line(251,e,299,e);
        }
        setcolor(WHITE);
        for(int e =250; e<300; e+=1){
            line(251,e,299,e);
        }
    }
    pawnBlue1(250,250);
    scanf("%d",&g);
    if(g==1)
        goto move1;
    delay(d);
//2nd move
move2:
	resetBoard();
    pawnWhite(250,350);
    pawnBlue1(250,250);
    pawnGreen(150,100);
    for(int e=100; e<=200;e=e+D){
        pawnBlack1(150,e);
        setcolor(GREEN);
        for(int e =100; e<150; e+=1){
            line(151,e,199,e);
        }
        setcolor(WHITE);
        for(int e =150; e<200; e+=1){
            line(151,e,199,e);
        }
        setcolor(GREEN);
        for(int e =200; e<250; e+=1){
            line(151,e,199,e);
        }
    }
    pawnBlack1(150,200);
    scanf("%d",&g);
    if(g==1)
        goto move1;
    if(g==2)
        goto move2;

    delay(d);

//3rd move
move3:
	resetBoard();
    pawnWhite(250,350);
    pawnBlue1(250,250);
    pawnGreen(150,100);
    pawnBlack1(150,200);
    knightGreen(350,400);
    for(int e=400; e>=350;e=e-D){
        knightBlue(350,e);
        setcolor(GREEN);
        for(int e =400; e<450; e+=1){
            line(351,e,399,e);
        }
        setcolor(WHITE);
        for(int e =350; e<400; e+=1){
            line(351,e,399,e);
        }
    }
    for(int e=350; e>=300;e=e-D){
        knightBlue(350,e);
        setcolor(WHITE);
        for(int e =350; e<400; e+=1){
            line(351,e,399,e);
        }
        setcolor(GREEN);
        for(int e =300; e<350; e+=1){
            line(351,e,399,e);
        }
    }
    pawnBlue1(350,350);
    for(int e = 350;e>=300;e=e-D){
        knightBlue(e,300);
        setcolor(GREEN);
        for(int e =300; e<350; e+=1){
            line(350,e,399,e);
        }
        setcolor(WHITE);
        for(int e =300; e<350; e+=1){
            line(301,e,349,e);
        }
    }
    knightBlue(300,300);
    scanf("%d",&g);
    if(g==1)
        goto move1;
    if(g==2)
        goto move2;
    if(g==3)
        goto move3;

//4th move
move4:
    delay(d);
	resetBoard();
    pawnWhite(250,350);
    pawnBlue1(250,250);
    pawnGreen(150,100);
    pawnBlack1(150,200);
    knightGreen(350,400);
    knightBlue(300,300);
    knightGreen(100,50);
    for(int e=50; e<=100;e=e+D){
        knightBlack(100,e);
        setcolor(GREEN);
        for(int e =50; e<100; e+=1){
            line(101,e,149,e);
        }
        setcolor(WHITE);
        for(int e =100; e<150; e+=1){
            line(101,e,149,e);
        }
    }
    for(int e=100; e<=150;e=e+D){
        knightBlack(100,e);
        setcolor(WHITE);
        for(int e =100; e<150; e+=1){
            line(100,e,149,e);
        }
        setcolor(GREEN);
        for(int e =150; e<200; e+=1){
            line(101,e,149,e);
        }
    }
    pawnBlack1(100,100);
    for(int e = 100;e<=150;e=e+D){
        knightBlack(e,150);
        setcolor(GREEN);
        for(int e =150; e<200; e+=1){
            line(101,e,149,e);
        }
        setcolor(WHITE);
        for(int e =150; e<200; e+=1){
            line(150,e,199,e);
        }
    }
    knightBlack(150,150);
    scanf("%d",&g);
    if(g==1)
        goto move1;
    if(g==2)
        goto move2;
    if(g==3)
        goto move3;
    if(g==4)
        goto move4;

//5th move

    delay(d);
move5:
	resetBoard();
    pawnWhite(250,350);
    pawnBlue1(250,250);
    pawnGreen(150,100);
    pawnBlack1(150,200);
    knightGreen(350,400);
    knightBlue(300,300);
    knightGreen(100,50);
    knightBlack(150,150);
    pawnGreen(200,350);
    for(int e=350; e>=250;e=e-D){
        pawnBlue1(200,e);
        setcolor(GREEN);
        for(int e =350; e<400; e+=1){
            line(201,e,249,e);
        }
        setcolor(WHITE);
        for(int e =300 ;e<350; e+=1){
            line(201,e,249,e);
        }
        setcolor(GREEN);
        for(int e =250; e<300; e+=1){
            line(201,e,249,e);
        }
    }
    pawnBlue1(200,250);
    scanf("%d",&g);
    if(g==1)
        goto move1;
    if(g==2)
        goto move2;
    if(g==3)
        goto move3;
    if(g==4)
        goto move4;
    if(g==5)
        goto move5;

    delay(d);
//6th move
move6:
	resetBoard();
    pawnWhite(250,350);
    pawnBlue1(250,250);
    pawnGreen(150,100);
    pawnBlack1(150,200);
    knightGreen(350,400);
    knightBlue(300,300);
    knightGreen(100,50);
    knightBlack(150,150);
    pawnGreen(200,350);
    pawnBlue1(200,250);
    pawnGreen(150,200);
    for(int e=200,f=150; e<=250,f<=200;e=e+D,f=f+D){
        pawnBlack1(f,e);
        setcolor(GREEN);
        for(int e =200; e<250; e+=1){
            line(151,e,199,e);
        }
        setcolor(WHITE);
        for(int e =200; e<250; e+=1){
            line(200,e,248,e);
        }
        setcolor(WHITE);
        for(int e =250; e<300; e+=1){
            line(151,e,199,e);
        }
        setcolor(GREEN);
        for(int e =250 ;e<300; e+=1){
            line(200,e,248,e);
        }
    }
    pawnBlack1(200,250);
    scanf("%d",&g);
    if(g==1)
        goto move1;
    if(g==2)
        goto move2;
    if(g==3)
        goto move3;
    if(g==4)
        goto move4;
    if(g==5)
        goto move5;
    if(g==6)
        goto move6;
    delay(d);

//7th move
move7:
	resetBoard();
    pawnWhite(250,350);
    pawnBlue1(250,250);
    pawnGreen(150,100);
    pawnBlack1(150,200);
    knightGreen(350,400);
    knightBlue(300,300);
    knightGreen(100,50);
    knightBlack(150,150);
    pawnGreen(200,350);
    pawnBlue1(200,250);
    pawnGreen(150,200);
    pawnBlack1(200,250);
    knightWhite(300,300);
    for(int e = 300;e>=250;e=e-D){
        knightBlue(e,300);
        setcolor(WHITE);
        for(int e =300; e<350; e+=1){
            line(300,e,349,e);
        }
        setcolor(GREEN);
        for(int e =300; e<350; e+=1){
            line(251,e,299,e);
        }
    }
    for(int e = 250;e>=200;e=e-D){
        knightBlue(e,300);
        setcolor(GREEN);
        for(int e =300; e<350; e+=1){
            line(250,e,299,e);
        }
        setcolor(WHITE);
        for(int e =300; e<350; e+=1){
            line(201,e,249,e);
        }
    }
    for(int e=300; e>=250;e=e-D){
        knightBlue(200,e);
        setcolor(WHITE);
        for(int e =300; e<350; e+=1){
            line(201,e,249,e);
        }
        setcolor(GREEN);
        for(int e =250; e<300; e+=1){
            line(201,e,249,e);
        }
    }
    pawnGreen(200,250);
    knightBlue(200,250);
    scanf("%d",&g);
    if(g==1)
        goto move1;
    if(g==2)
        goto move2;
    if(g==3)
        goto move3;
    if(g==4)
        goto move4;
    if(g==5)
        goto move5;
    if(g==6)
        goto move6;
    if(g==7)
        goto move7;

    delay(d);

//8th move
move8:
	resetBoard();
    pawnWhite(250,350);
    pawnBlue1(250,250);
    pawnGreen(150,100);
    pawnBlack1(150,200);
    knightGreen(350,400);
    knightBlue(300,300);
    knightGreen(100,50);
    knightBlack(150,150);
    pawnGreen(200,350);
    pawnBlue1(200,250);
    pawnGreen(150,200);
    pawnBlack1(200,250);
    knightWhite(300,300);
    pawnGreen(200,250);
    knightBlue(200,250);
    pawnGreen(250,100);
    for(int e=100; e<=150;e=e+D){
        pawnBlack1(250,e);
        setcolor(GREEN);
        for(int e =100; e<150; e+=1){
            line(251,e,299,e);
        }
        setcolor(WHITE);
        for(int e =150; e<200; e+=1){
            line(251,e,299,e);
        }
    }
    pawnBlack1(250,150);
    scanf("%d",&g);
    if(g==1)
        goto move1;
    if(g==2)
        goto move2;
    if(g==3)
        goto move3;
    if(g==4)
        goto move4;
    if(g==5)
        goto move5;
    if(g==6)
        goto move6;
    if(g==7)
        goto move7;
    if(g==8)
        goto move8;
    delay(d);

//9th move
move9:
	resetBoard();
    pawnWhite(250,350);
    pawnBlue1(250,250);
    pawnGreen(150,100);
    pawnBlack1(150,200);
    knightGreen(350,400);
    knightBlue(300,300);
    knightGreen(100,50);
    knightBlack(150,150);
    pawnGreen(200,350);
    pawnBlue1(200,250);
    pawnGreen(150,200);
    pawnBlack1(200,250);
    knightWhite(300,300);
    pawnGreen(200,250);
    knightBlue(200,250);
    pawnGreen(250,100);
    pawnBlack1(250,150);
    knightWhite(100,400);
    for(int i=400;i>=350;i=i-D){
        knightBlue(100,i);
        setcolor(WHITE);
        for(int i=400;i<450;i+=1){
            line(101,i,149,i);
        }
        setcolor(GREEN);
        for(int i=350;i<400;i+=1){
            line(101,i,149,i);
        }
    }
    for(int e=350; e>=300;e=e-D){
        knightBlue(100,e);
          setcolor(GREEN);
        for(int e =350; e<400; e+=1){
            line(101,e,149,e);
        }
        setcolor(WHITE);
        for(int e =300; e<350; e+=1){
            line(101,e,149,e);
        }
    }
    pawnBlue1(100,350);
    for(int e = 100;e<=150;e=e+D){
        knightBlue(e,300);
        setcolor(WHITE);
        for(int e =300; e<350; e+=1){
            line(101,e,150,e);
        }
        setcolor(GREEN);
        for(int e =300; e<350; e+=1){
            line(151,e,199,e);
        }
    }
    knightBlue(150,300);
    scanf("%d",&g);
    if(g==1)
        goto move1;
    if(g==2)
        goto move2;
    if(g==3)
        goto move3;
    if(g==4)
        goto move4;
    if(g==5)
        goto move5;
    if(g==6)
        goto move6;
    if(g==7)
        goto move7;
    if(g==8)
        goto move8;
    if(g==9)
        goto move9;
    delay(d);

//10th move
move10:
	resetBoard();
    pawnWhite(250,350);
    pawnBlue1(250,250);
    pawnGreen(150,100);
    pawnBlack1(150,200);
    knightGreen(350,400);
    knightBlue(300,300);
    knightGreen(100,50);
    knightBlack(150,150);
    pawnGreen(200,350);
    pawnBlue1(200,250);
    pawnGreen(150,200);
    pawnBlack1(200,250);
    knightWhite(300,300);
    pawnGreen(200,250);
    knightBlue(200,250);
    pawnGreen(250,100);
    pawnBlack1(250,150);
    knightWhite(100,400);
    knightBlue(150,300);
    pawnGreen(50,100);
    for(int e=100; e<=150;e=e+D){
        pawnBlack1(50,e);
        setcolor(GREEN);
        for(int e =100; e<150; e+=1){
            line(50,e,99,e);
        }
        setcolor(WHITE);
        for(int e =150; e<200; e+=1){
            line(50,e,99,e);
        }
    }
    pawnBlack1(50,150);
    scanf("%d",&g);
    if(g==1)
        goto move1;
    if(g==2)
        goto move2;
    if(g==3)
        goto move3;
    if(g==4)
        goto move4;
    if(g==5)
        goto move5;
    if(g==6)
        goto move6;
    if(g==7)
        goto move7;
    if(g==8)
        goto move8;
    if(g==9)
        goto move9;
    if(g==10)
        goto move10;

    delay(d);

//11th move
move11:
	resetBoard();
    pawnWhite(250,350);
    pawnBlue1(250,250);
    pawnGreen(150,100);
    pawnBlack1(150,200);
    knightGreen(350,400);
    knightBlue(300,300);
    knightGreen(100,50);
    knightBlack(150,150);
    pawnGreen(200,350);
    pawnBlue1(200,250);
    pawnGreen(150,200);
    pawnBlack1(200,250);
    knightWhite(300,300);
    pawnGreen(200,250);
    knightBlue(200,250);
    pawnGreen(250,100);
    pawnBlack1(250,150);
    knightWhite(100,400);
    knightBlue(150,300);
    pawnGreen(50,100);
    pawnBlack1(50,150);
    bishopGreen(150,400);
    for(int e=400,f=150; e>=350,f<=200;e=e-D,f=f+D){
        bishopBlue(f,e);
        setcolor(GREEN);
        for(int e =400 ;e<450; e+=1){
            line(151,e,199,e);
        }
        setcolor(WHITE);
        for(int e =350; e<400; e+=1){
            line(151,e,199,e);
        }
        setcolor(GREEN);
        for(int e =350; e<400; e+=1){
            line(200,e,249,e);
        }
        setcolor(WHITE);
        for(int e =400; e<450; e+=1){
            line(200,e,249,e);
        }
        queenBlue(200,400);
        pawnBlue1(150,350);
    }
	queenBlue(200,400);
	pawnBlue1(150,350);
    bishopGreen(150,400);
    for(int e=350,f=200; e>=300,f<=250;e=e-D,f=f+D){
        bishopBlue(f,e);
        setcolor(GREEN);
        for(int e =350; e<400; e+=1){
            line(201,e,249,e);
        }
        setcolor(WHITE);
        for(int e =300; e<350; e+=1){
            line(201,e,249,e);
        }
        setcolor(GREEN);
        for(int e =300; e<350; e+=1){
            line(250,e,299,e);
        }
        setcolor(WHITE);
        for(int e =350; e<400; e+=1){
            line(250,e,299,e);
        }
    }
    bishopBlue(250,300);
    scanf("%d",&g);
    if(g==1)
        goto move1;
    if(g==2)
        goto move2;
    if(g==3)
        goto move3;
    if(g==4)
        goto move4;
    if(g==5)
        goto move5;
    if(g==6)
        goto move6;
    if(g==7)
        goto move7;
    if(g==8)
        goto move8;
    if(g==9)
        goto move9;
    if(g==10)
        goto move10;
    if(g==11)
        goto move11;

    delay(d);

//12th move
move12:
	resetBoard();
    pawnWhite(250,350);
    pawnBlue1(250,250);
    pawnGreen(150,100);
    pawnBlack1(150,200);
    knightGreen(350,400);
    knightBlue(300,300);
    knightGreen(100,50);
    knightBlack(150,150);
    pawnGreen(200,350);
    pawnBlue1(200,250);
    pawnGreen(150,200);
    pawnBlack1(200,250);
    knightWhite(300,300);
    pawnGreen(200,250);
    knightBlue(200,250);
    pawnGreen(250,100);
    pawnBlack1(250,150);
    knightWhite(100,400);
    knightBlue(150,300);
    pawnGreen(50,100);
    pawnBlack1(50,150);
    bishopGreen(150,400);
    bishopBlue(250,300);
    knightGreen(100,50);
    for(int e=50; e<=100;e=e+D){
        knightBlack(350,e);
        setcolor(WHITE);
        for(int e =50; e<100; e+=1){
            line(351,e,399,e);
        }
        setcolor(GREEN);
        for(int e =100; e<150; e+=1){
            line(351,e,399,e);
        }
    }
    for(int e=100; e<=150;e=e+D){
        knightBlack(350,e);
        setcolor(GREEN);
        for(int e =100; e<150; e+=1){
            line(351,e,399,e);
        }
        setcolor(WHITE);
        for(int e =150; e<200; e+=1){
            line(351,e,399,e);
        }
    }
    pawnBlack1(350,100);
    for(int e = 350;e>=300;e=e-D){
        knightBlack(e,150);
        setcolor(WHITE);
        for(int e =150; e<200; e+=1){
            line(350,e,399,e);
        }
        setcolor(GREEN);
        for(int e =150; e<200; e+=1){
            line(300,e,349,e);
        }
    }
    knightBlack(300,150);

	delay(d);

//13th move
move13:
	resetBoard();
    pawnWhite(250,350);
    pawnBlue1(250,250);
    pawnGreen(150,100);
    pawnBlack1(150,200);
    knightGreen(350,400);
    knightBlue(300,300);
    knightGreen(100,50);
    knightBlack(150,150);
    pawnGreen(200,350);
    pawnBlue1(200,250);
    pawnGreen(150,200);
    pawnBlack1(200,250);
    knightWhite(300,300);
    pawnGreen(200,250);
    knightBlue(200,250);
    pawnGreen(250,100);
    pawnBlack1(250,150);
    knightWhite(100,400);
    knightBlue(150,300);
    pawnGreen(50,100);
    pawnBlack1(50,150);
    bishopGreen(150,400);
    bishopBlue(250,300);
    knightGreen(100,50);
	queenWhite(200,400);
    for(int e=400; e>=350;e=e-D){
        queenBlue(200,e);
        setcolor(WHITE);
        for(int e =400; e<450; e+=1){
            line(201,e,249,e);
        }
        setcolor(GREEN);
        for(int e =350 ;e<400; e+=1){
            line(201,e,249,e);
        }
    }
    queenBlue(200,350);
	delay(d);

//14th move japneet aake karega...
move14:
	resetBoard();
//1
    pawnWhite(250,350);
    pawnBlue1(250,250);
//2
    pawnGreen(150,100);
    pawnBlack1(150,200);
//3
    knightGreen(350,400);
    knightBlue(300,300);
//4
    knightGreen(100,50);
    knightBlack(150,150);
//5
    pawnGreen(200,350);
    pawnBlue1(200,250);
//6
    pawnGreen(150,200);
    pawnBlack1(200,250);
//7
    knightWhite(300,300);
    pawnGreen(200,250);
    knightBlue(200,250);
//8
    pawnGreen(250,100);
    pawnBlack1(250,150);
//9
    knightWhite(100,400);
    knightBlue(150,300);
//10
    pawnGreen(50,100);
    pawnBlack1(50,150);
//11
    bishopGreen(150,400);
    bishopBlue(250,300);
    knightGreen(100,50);
    knightBlack(300,150);
    queenBlue(200,350);
	queenWhite(200,400);
    for(int e=50,f=300;e<=100,f>=250;e+=1,f-=1){
        bishopBlack(f,e);
        setcolor(GREEN);
        for(int e=50;e<100;e+=1){
            line(300,e,349,e);
        }
        setcolor(WHITE);
        for(int e=100;e<150;e+=1){
            line(300,e,349,e);
        }
        setcolor(WHITE);
        for(int e=50;e<100;e+=1){
            line(251,e,299,e);
        }
        setcolor(GREEN);
        for(int e=100;e<150;e+=1){
            line(251,e,299,e);
        }
        kingBlack(250,50);
        pawnBlack1(300,100);
    }
    kingBlack(250,50);
    pawnBlack1(300,100);
    bishopBlack(300,50);
    for(int e=100,f=250;e<=150,f>=200;e+=1,f-=1){
        bishopBlack(f,e);
        setcolor(GREEN);
        for(int e=100;e<150;e+=1){
            line(250,e,299,e);
        }
        setcolor(WHITE);
        for(int e=150;e<200;e+=1){
            line(250,e,299,e);
        }
        setcolor(WHITE);
        for(int e=100;e<150;e+=1){
            line(201,e,249,e);
        }
        setcolor(GREEN);
        for(int e=150;e<200;e+=1){
            line(201,e,249,e);
        }
        pawnBlack1(200,100);
        pawnBlack1(250,150);
    }
    pawnBlack1(200,100);
    pawnBlack1(250,150);
	bishopGreen(300,50);
    for(int e=150,f=200;e<=200,f>=150;e+=1,f-=1){
        bishopBlack(f,e);
        setcolor(GREEN);
        for(int e=150;e<200;e+=1){
            line(200,e,249,e);
        }
        setcolor(WHITE);
        for(int e=200;e<250;e+=1){
            line(200,e,249,e);
        }
        setcolor(WHITE);
        for(int e=150;e<200;e+=1){
            line(151,e,199,e);
        }
        setcolor(GREEN);
        for(int e=200;e<250;e+=1){
            line(151,e,199,e);
        }
        knightBlack(150,150);
    }
    knightBlack(150,150);
    for(int e=200,f=150;e<=250,f>=100;e+=1,f-=1){
        bishopBlack(f,e);
        setcolor(GREEN);
        for(int e=200;e<250;e+=1){
            line(150,e,199,e);
        }
        setcolor(WHITE);
        for(int e=250;e<300;e+=1){
            line(150,e,199,e);
        }
        setcolor(WHITE);
        for(int e=200;e<250;e+=1){
            line(101,e,149,e);
        }
        setcolor(GREEN);
        for(int e=250;e<300;e+=1){
            line(101,e,149,e);
        }
    }
	bishopBlack(100,250);

	delay(d);

//15th move

    pawnGreen(300,350);
     //pawnWhite(250,350);
    for(int e=350; e>=300;e=e-D){
        pawnBlue1(300,e);
        setcolor(GREEN);
        for(int e =350; e<400; e+=1){
            line(301,e,349,e);
        }
        setcolor(WHITE);
        for(int e =300 ;e<350; e+=1){
            line(301,e,349,e);
        }
    }
    pawnBlue1(300,300);

    delay(d);

//16th move

    pawnWhite(200,100);
    //pawnGreen(150,100);
    for(int e=100; e<=200;e=e+D){
        pawnBlack1(200,e);
        setcolor(WHITE);
        for(int e =100; e<150; e+=1){
            line(201,e,249,e);
        }
        setcolor(GREEN);
        for(int e =150; e<200; e+=1){
            line(201,e,249,e);
        }
        setcolor(WHITE);
        for(int e =200; e<250; e+=1){
            line(201,e,249,e);
        }
    }
    pawnBlack1(200,200);
    delay(d);

//17th move

    pawnWhite(50,350);
    for(int e=350; e>=300; e-=1){
        pawnBlue1(50,e);
        setcolor(WHITE);
        for(int e=350;e<400;e+=1){
            line(51,e,99,e);
        }
        setcolor(GREEN);
        for(int e=300;e<350;e+=1){
            line(51,e,99,e);
        }
    }
    delay(d);
    pawnBlue1(50,300);

    delay(1000);

//18th move

    for(int e=50,f=200;e<=100,f>=150;e+=1,f-=1){
        queenBlack(f,e);
        setcolor(GREEN);
        for(int e=50;e<100;e+=1){
            line(200,e,249,e);
        }
        setcolor(WHITE);
        for(int e=100;e<150;e+=1){
            line(200,e,249,e);
        }
        setcolor(GREEN);
        for(int e=100;e<150;e+=1){
            line(151,e,199,e);
        }
        setcolor(WHITE);
        for(int e=50;e<100;e+=1){
            line(151,e,199,e);
        }
        bishopBlack(150,50);
    }
    bishopBlack(150,50);
    for(int e=100,f=150;e<=150,f>=100;e+=1,f-=1){
        queenBlack(f,e);
        setcolor(GREEN);
        for(int e=100;e<150;e+=1){
            line(150,e,199,e);
        }
        setcolor(WHITE);
        for(int e=150;e<200;e+=1){
            line(150,e,199,e);
        }
        setcolor(GREEN);
        for(int e=150;e<200;e+=1){
            line(101,e,149,e);
        }
        setcolor(WHITE);
        for(int e=100;e<150;e+=1){
            line(101,e,149,e);
        }
        pawnBlack1(100,100);
        knightBlack(150,150);
    }
    pawnBlack1(100,100);
    knightBlack(150,150);
    for(int e=150,f=100;e<=200,f>=50;e+=1,f-=1){
        queenBlack(f,e);
        setcolor(GREEN);
        for(int e=150;e<200;e+=1){
            line(100,e,149,e);
        }
        setcolor(WHITE);
        for(int e=200;e<250;e+=1){
            line(100,e,149,e);
        }
        setcolor(GREEN);
        for(int e=200;e<250;e+=1){
            line(51,e,99,e);
        }
        setcolor(WHITE);
        for(int e=150;e<200;e+=1){
            line(51,e,99,e);
        }
        pawnBlack1(50,150);
    }
    pawnBlack1(50,150);
    queenBlack(50,200);

//19th move

    for(int e=250;e<=300;e+=1){
        knightBlue(200,e);
        setcolor(GREEN);
        for(int e=250;e<300;e+=1){
            line(201,e,249,e);
        }
        setcolor(WHITE);
        for(int e=300;e<350;e+=1){
            line(201,e,249,e);
        }
    }
    for(int e=200;e>=150;e-=1){
        knightBlue(e,300);
        setcolor(WHITE);
        for(int e=300;e<350;e+=1){
            line(200,e,249,e);
        }
        setcolor(GREEN);
        for(int e=300;e<350;e+=1){
            line(151,e,199,e);
        }
        knightBlue(150,300);
    }
    for(int e=150;e>=100;e-=1){
        knightBlue(e,300);
        setcolor(GREEN);
        for(int e=300;e<350;e+=1){
            line(150,e,199,e);
        }
        setcolor(WHITE);
        for(int e=300;e<350;e+=1){
            line(100,e,149,e);
        }
        knightBlue(150,300);
    }
    delay(d);
    knightBlue(100,300);

//20th move

    for(int e=250,f=100;e<=300,f<=150;e+=D,f+=D){
        bishopBlack(f,e);
        setcolor(GREEN);
        for(int e=250;e<300;e+=1){
            line(101,e,149,e);
        }
        setcolor(WHITE);
        for(int e=250;e<300;e+=1){
            line(150,e,199,e);
        }
        setcolor(GREEN);
        for(int e=300;e<350;e+=1){
            line(150,e,199,e);
        }
        setcolor(WHITE);
        for(int e=300;e<350;e+=1){
            line(101,e,149,e);
        }
        knightBlue(100,300);
    }
    knightBlue(100,300);
    bishopBlack(150,300);

//21st move

    for(int e=350,f=100; e>=300,f<=150;e=e-D,f=f+D){
        pawnBlue1(f,e);
        setcolor(GREEN);
        for(int e =350; e<400; e+=1){
            line(101,e,149,e);
        }
        setcolor(WHITE);
        for(int e =350; e<400; e+=1){
            line(150,e,199,e);
        }
        setcolor(WHITE);
        for(int e =300; e<350; e+=1){
            line(101,e,149,e);
        }
        setcolor(GREEN);
        for(int e =300 ;e<350; e+=1){
            line(150,e,199,e);
        }
        knightBlue(100,300);
        pawnBlue1(150,350);
    }
    pawnBlue1(150,300);
    d=1000;
    delay(d);

    queenGreen(50,200);
    delay(d);
    queenBlack(150,100);

    delay(d);

    bishopGreen(250,300);
    delay(d);
    bishopBlue(300,250);

    delay(d);

    pawnWhite(250,150);
    delay(d);
    pawnBlack1(250,200);

    delay(d);

    pawnWhite(250,250);
    delay(d);
    pawnBlack1(200,200);
    pawnBlue1(200,200);

    delay(d);

    pawnGreen(250,200);
    bishopGreen(300,250);
    pawnBlack1(300,250);

    delay(d);

    pawnWhite(200,200);
    knightWhite(150,150);
    pawnBlue1(150,150);

    delay(d);


    rookGreen(400,50);
    kingWhite(250,50);
    delay(d);
    kingBlack(350,50);
    rookBlack(300,50);

    delay(d);

    rookGreen(50,400);
    kingGreen(250,400);
    delay(d);
    kingBlue(150,400);
    rookBlue(200,400);

    delay(d);

    queenGreen(150,100);
    delay(d);
    pawnWhite(150,150);
    queenBlack(150,150);

    delay(d);

    pawnGreen(150,300);
    delay(d);
    pawnBlue1(150,250);

    delay(d);

    bishopWhite(150,50);
    delay(d);
    bishopBlack(250,150);

    delay(d);

    queenGreen(200,350);
    delay(d);
    pawnGreen(300,250);
    queenBlue(300,250);

    delay(d);

    rookWhite(50,50);
    delay(d);
    rookBlack(150,50);

    delay(d);

    queenGreen(300,250);
    delay(d);
    queenBlue(200,150);

    delay(d);

    queenWhite(150,150);
    delay(d);
    queenBlack(50,250);

    delay(d);

    queenGreen(200,150);
    delay(d);
    queenBlue(100,250);

    delay(d);

    queenWhite(50,250);
    delay(d);
    queenGreen(100,250);
    delay(d);
    queenBlack(100,250);

    delay(d);

    pawnGreen(50,300);
    delay(d);
    queenGreen(100,250);
    delay(d);
    pawnBlue1(100,250);

    delay(d);

    bishopWhite(250,150);
    delay(d);
    pawnWhite(150,250);
    bishopBlack(150,250);

    delay(d);

    knightWhite(100,300);
    delay(d);
    knightBlue(150,200);

    delay(d);

    bishopWhite(150,250);
    delay(d);
    bishopWhite(300,400);
    bishopBlack(300,400);

    delay(d);

    rookWhite(400,400);
    delay(d);
    bishopWhite(300,400);
    rookBlue(300,400);

    delay(d);

    pawnWhite(50,150);
    delay(d);
    pawnBlack1(50,200);

    delay(d);

    knightGreen(150,200);
    delay(d);
    pawnWhite(100,100);
    knightBlue(100,100);

    delay(d);

    pawnGreen(50,200);
    delay(d);
    pawnGreen(100,250);
    pawnBlack1(100,250);

    delay(d);

    kingGreen(150,400);
    delay(d);
    kingBlue(100,350);

    delay(d);

    rookWhite(150,50);
    delay(d);
    rookBlack(150,100);

    delay(d);

    knightWhite(100,100);
    delay(d);
    knightBlue(200,150);

    delay(d);

    pawnGreen(350,100);
    delay(d);
    pawnBlack1(350,150);

    delay(d);

    rookWhite(200,400);
    delay(d);
    rookBlue(200,250);

    delay(d);

    rookGreen(300,50);
    delay(d);
    rookBlack(100,50);

    delay(d);

    rookWhite(300,400);
    delay(d);
    rookBlue(200,400);

    delay(d);

    rookGreen(100,50);
    delay(d);
    rookBlack(100,150);

    delay(d);

    rookWhite(200,400);
    delay(d);
    rookBlue(200,350);

    delay(d);

    pawnWhite(400,100);
    delay(d);
    pawnBlack1(400,200);

    delay(d);

    rookGreen(200,250);
    delay(d);
    rookBlue(300,250);

    delay(d);

    knightGreen(300,150);
    delay(d);
    knightBlack(400,100);

    delay(d);

    rookGreen(300,250);
    delay(d);
    rookBlue(250,250);

    delay(d);

    knightWhite(400,100);
    delay(d);
    knightBlack(300,50);

    delay(d);

    knightGreen(200,150);
    delay(d);
    knightBlue(150,250);

    delay(d);

    rookGreen(100,150);
    delay(d);
    rookBlack(100,50);

    delay(d);

    knightWhite(150,250);
    delay(d);
    knightBlue(250,300);

    delay(d);

    knightGreen(300,50);
    delay(d);
    knightBlack(250,150);

    delay(d);

    rookWhite(250,250);
    delay(d);
    rookBlue(150,250);

    delay(d);

    rookGreen(150,100);
    delay(d);
    rookBlack(100,100);

    delay(d);

    rookGreen(200,350);
    delay(d);
    rookBlue(200,300);

    delay(d);

    kingWhite(350,50);
    delay(d);
    kingBlack(350,100);

    delay(d);

    knightGreen(250,300);
    delay(d);
    knightBlue(200,200);

    delay(d);

    rookWhite(100,100);
    delay(d);
    rookBlack(100,200);

    delay(d);

    knightWhite(200,200);
    delay(d);
    knightBlue(150,100);

    delay(d);

    knightWhite(250,150);
    delay(d);
    knightBlack(150,100);

    delay(d);

    rookWhite(150,250);
    knightGreen(150,100);
    delay(d);
    rookBlue(150,100);

    delay(d);

    rookGreen(100,50);
    delay(d);
    rookBlack(250,50);

    delay(d);

    rookWhite(200,300);
    delay(d);
    rookBlue(200,350);

    delay(d);

    rookWhite(250,50);
    delay(d);
    rookBlack(250,300);

    delay(d);

    rookGreen(150,100);
    delay(d);
    rookBlue(150,250);

    delay(d);

    rookWhite(100,200);
    delay(d);
    rookBlack(100,100);

    delay(d);
    setcolor(WHITE);
	outtextxy(515,220, "Match DRAW");



//    queen(200,400,2);
//    delay(3000);
//	queenBlue(200,250);
//    int o,p=1;
//   for(;p!=0;){
//        printf("Pawn :1 \nKnight :2 \nRook :3 \nBishop :4 \nKing :5 \nQueen :6\nEnter your choice: ");
//scanf("%d",&o);
//        switch(o){
//            case 1: printf("Pawn \n");
//                break;
//            case 2: printf("Knight \n");
 //               break;
   //         case 3: printf("Rook \n");
     //           break;
       //     case 4: printf("Bishop \n");
         //       break;
           // case 5: printf("King \n");
             //   break;
            //case 6: printf("Queen \n");
              //  break;
        //}
        //p/=o;
    //}
//    }
    getch();
    closegraph();
}

